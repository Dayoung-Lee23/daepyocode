package whileFor;
/*
for문과 while문은 구조와 기능이 유사하여 어느 경우에나 서로 변환이 가능하며,
반복 횟수를 알고 있을 때는 for문을, 그렇지 않을 때는 while문을 사용한다.
break문은 자신이 포함된 가장 가까운 반복문을 벗어난다. 주로 if문과 함께 사용되어 특정 조건을 만족하면 반복문을 벗어나게 한다.
 */
class WhileFor {
    public static void main(String[] args){
//While문은 if문처럼 조건식과 {}만으로 이루어져 있으나, 조건식이 '참인 동안' 즉 조건식이 false가 될 때까지 블럭{}내의 문장을 반복한다.
        int t = 0;
        while(t<6){ //while (조건식) { 조건식이 참일 동안 반복될 문장 }
//먼저 조건식을 평가해서 조건식이 거짓이면 문장 전체를 벗어나고, 참이면 블럭{} 내의 문장을 수행하고 다시 조건식으로 돌아간다.
            System.out.println("while 종이접기" + t + "번째");//0부터 시작, 종이접기 0번째 출력한 뒤
            t++;// +1을 해서 조건문으로 돌아간다. 그러고 1번째 출력하고 +1 해서 조건문 돌아간다. 2번째 출력 후 +1 반복.
            if(t==4){
                break; //break문이 수행되면 그 다음은 수행하지 않고 완전히 while문을 벗어난다.
            }
        }
        for(int i=0; i<6; i++){ //for(초기화, 조건식; 증감식){ 수행할 문장 }
/*제일 먼저 초기화가 수행되고, 그 이후 조건식이 참인 동안 조건식 -> 수행할 문장 -> 증감식 순서로 계속 반복됨.
그러다 조건식이 거짓이 되면 for문 전체를 빠져나온다. 조건식 안의 요소들은 생략이 될 수 있으나, 참으로 간주되어 무한 반복문이 된다.
따라서 이럴 땐 블럭{} 안에 if문을 넣어서 특정조건을 만족하면 for문을 빠져 나오게 해야한다.*/
            if (i==4){
                break;
            }
            System.out.println("for 종이접기" + i + "번째");
        }
    }
}
